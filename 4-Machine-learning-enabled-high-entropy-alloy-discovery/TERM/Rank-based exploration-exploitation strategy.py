# -*- coding: utf-8 -*-
"""
Created on Sun Feb 27 15:42:28 2022

@author: z.rao
"""

import os
import time
from bayes_opt import BayesianOptimization
#from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from lightgbm import LGBMRegressor
import numpy as np
#import seaborn as sns
#from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import explained_variance_score
#from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import datetime
import pandas as pd
#compute the mean and std
prediciton_mean = Comp_total.mean(axis=1)
prediciton_std = Comp_total.std(axis=1)
WAE_x['prediction_mean'] = prediciton_mean
WAE_x['prediction_std'] = prediciton_std
#WAE_x['rank_score'] =prediciton_std*0.2+prediciton_mean*0.8
#WAE_x.sort_values(by=['Cr'],ascending=True)
#Comp_total = Comp_total[Comp_total['Cr']>0.04]
#WAE_x = WAE_x.sort_values(by=['prediction_mean'],ascending=True)
#Comp_total.to_csv('Results/Comp_total_1.csv')
#WAE_x.loc[(WAE_x['Cr'] > 0.04)].to_csv('Results/WAE_x_1.csv')
df = WAE_x[['Fe','Ni','Co','Cr','V','Cu','prediction_mean','prediction_std']]
df=df[(df['Fe']>0.1) & (df['Ni']>0.05)& (df['Co']>0.1)& (df['Cr']>=0.04)&(df['V']==0)  & (df['Cu']>=0.05)
      &(df['prediction_mean']<10)]
# make the ranking
df['mean_rank']=df['prediction_mean'].rank()
df['std_rank']=df['prediction_std'].rank(ascending=False)
df['total_rank'] =0.8*df['mean_rank']+0.2*df['std_rank']
df = df[df['total_rank']<1000]
#plot the figure to have a overview
x=df[['Fe','Ni','Co','Cr','V','Cu']]
from sklearn.decomposition import PCA
pca = PCA(n_components=2)
principalComponents = pca.fit_transform(x)
principalDf = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2'])
import matplotlib.pyplot as plt
fig = plt.figure(figsize = (12,8))
ax = fig.add_subplot(1,1,1) 
ax.set_xlabel('Principal Component 1', fontsize = 15)
ax.set_ylabel('Principal Component 2', fontsize = 15)
ax.set_title('2 component PCA', fontsize = 20)
sc=plt.scatter(principalDf[ 'principal component 1']
                , principalDf['principal component 2']
               ,c=df['Fe'], s = 50)
plt.colorbar(sc)
